<?xml version="1.0"?>
<typesystem>
  <object-type name="TrajectoryGenerator">
    <modify-field name="m_fieldOfView" remove="all" />
    <modify-field name="m_spatialResolution" remove="all" />
  </object-type>
  <object-type name="Trajectory">
    <modify-field name="imageDimensions" remove="all" />
    <modify-field name="fieldOfView" remove="all" />
    <modify-field name="spatialResolution" remove="all" />
    <modify-field name="gradientWaveformsShort" remove="all" />
    <add-function signature="k_space_coordinates()" return-type="PyObject*">
      <extra-includes>
        <include location="global" file-name="numpy.h"/>
      </extra-includes>
      <inject-code>
        initializeNumpy();

        QVector&lt;npy_intp&gt; dimensions = {%CPPSELF.numReadoutPoints, %CPPSELF.numDimensions, %CPPSELF.numReadouts};
        QVector&lt;npy_intp&gt; strides = {};
        npy_intp stride = 1;
        for (const npy_intp dimension : dimensions) {
          strides.append(stride);
          stride *= dimension;
        }

        std::reverse(std::begin(dimensions), std::end(dimensions));
        %PYARG_0 = PyArray_NewFromDescr(&amp;PyArray_Type, PyArray_DescrFromType(NPY_FLOAT32), 3, dimensions.data(), NULL, %CPPSELF.kSpaceCoordinates, NPY_ARRAY_WRITEABLE, NULL);
      </inject-code>
    </add-function>
    <add-function signature="gradient_waveforms()" return-type="PyObject*">
      <extra-includes>
        <include location="global" file-name="numpy.h"/>
      </extra-includes>
      <inject-code>
        initializeNumpy();

        QVector&lt;npy_intp&gt; dimensions = {%CPPSELF.numWaveformPoints, %CPPSELF.numDimensions, %CPPSELF.numReadouts};
        QVector&lt;npy_intp&gt; strides = {};
        npy_intp stride = 1;
        for (const npy_intp dimension : dimensions) {
          strides.append(stride);
          stride *= dimension;
        }

        std::reverse(std::begin(dimensions), std::end(dimensions));
        %PYARG_0 = PyArray_NewFromDescr(&amp;PyArray_Type, PyArray_DescrFromType(NPY_FLOAT32), 3, dimensions.data(), NULL, %CPPSELF.gradientWaveforms, NPY_ARRAY_WRITEABLE, NULL);
        <!-- %PYARG_0 = mapNumpyArray(%CPPSELF.gradientWaveforms, {%CPPSELF.numWaveformPoints, %CPPSELF.numDimensions, %CPPSELF.numReadouts}); -->
      </inject-code>
    </add-function>
    <add-function signature="spatial_resolution()" return-type="std::vector&lt;float&gt;">
      <inject-code>
        std::vector&lt;float&gt; spatialResolution(%CPPSELF.spatialResolution, %CPPSELF.spatialResolution + %CPPSELF.numDimensions);
        %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt;float&gt;](spatialResolution);
      </inject-code>
    </add-function>
    <add-function signature="k_max()" return-type="std::vector&lt;float&gt;">
      <inject-code>
        std::vector&lt;float&gt; kMax(2);
        kSpaceExtent(%CPPSELF.spatialResolution, %CPPSELF.numDimensions, kMax.data());
        %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt;float&gt;](kMax);
      </inject-code>
    </add-function>
    <add-function signature="image_dimensions()" return-type="std::vector&lt;float&gt;">
      <inject-code>
        std::vector&lt;int&gt; imageDimensions(%CPPSELF.imageDimensions, %CPPSELF.imageDimensions + %CPPSELF.numDimensions);
        %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt;int&gt;](imageDimensions);
      </inject-code>
    </add-function>
    <add-function signature="field_of_view" return-type="std::vector&lt;float&gt;">
      <inject-code>
        std::vector&lt;float&gt; fieldOfView(%CPPSELF.fieldOfView, %CPPSELF.fieldOfView + %CPPSELF.numDimensions);
        %PYARG_0 = %CONVERTTOPYTHON[std::vector&lt;float&gt;](fieldOfView);
      </inject-code>
    </add-function>
    <add-function signature="waveform_duration" return-type="float">
      <inject-code>
        const float duration = %CPPSELF.numWaveformPoints * %CPPSELF.samplingInterval;
        %PYARG_0 = %CONVERTTOPYTHON[float](duration);
      </inject-code>
    </add-function>
  </object-type>
  <enum-type name="TrajectoryType" />
</typesystem>
